{"Typealiases.html#/s:19DottedVersionVector03DotC0a":{"name":"DotVector","abstract":"<p>Container of Dot instances that makes up a version vector.</p>"},"Structs/Dot.html#/s:19DottedVersionVector3DotV3keySSvp":{"name":"key","abstract":"<p>Undocumented</p>","parent_name":"Dot"},"Structs/Dot.html#/s:19DottedVersionVector3DotV7counters6UInt64Vvp":{"name":"counter","abstract":"<p>Undocumented</p>","parent_name":"Dot"},"Structs/Dot.html#/s:19DottedVersionVector3DotV9incrementACyF":{"name":"increment()","abstract":"<p>Obtain a new Dot instance with an incremented counted</p>","parent_name":"Dot"},"Structs/Dot.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Dot"},"Structs/Dot.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"Dot"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV2vvSayAA3DotVGvp":{"name":"vv","abstract":"<p>Undocumented</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV3dotAA3DotVSgvp":{"name":"dot","abstract":"<p>Undocumented</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV2vv3dotACSayAA3DotVG_AGSgtcfc":{"name":"init(vv:dot:)","abstract":"<p>Construct new instance with the given (default) values.</p>","parent_name":"DVV"},"Structs/DVV.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV9increment3keyACSS_tF":{"name":"increment(key:)","abstract":"<p>Obtain a new DVV with the given key incremented by 1</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV8descendsySbACSgF":{"name":"descends(_:)","abstract":"<p>Determine if this DVV descends from another. Note that this is true when <code>rhs</code> is nil.</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV16descendsStrictlyySbACSgF":{"name":"descendsStrictly(_:)","abstract":"<p>Determine if this DVV strictly descends from another, where <em>strictly</em> means the two instances cannot be","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV8mergeDotSayAA0F0VGyF":{"name":"mergeDot()","abstract":"<p>Obtain a DotVector containing the merge of the version vector and the dot</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV7counter2ofs6UInt64VSS_tF":{"name":"counter(of:)","abstract":"<p>Obtain the counter for a given key. Looks first in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DVV.html#/s:19DottedVersionVector3DVVV3dotAA3DotVSgvp\">dot</a></code> and then in the version vector.</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV3dot2ofAA3DotVSS_tF":{"name":"dot(of:)","abstract":"<p>Obtain a new Dot instance containing the counter of the given key</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV6update6client6server3keyA2CSg_AHSStFZ":{"name":"update(client:server:key:)","abstract":"<p>Obtain a clock that is newer than the client and server clocks at the given <code>key</code> counter.</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV6update6client6server3keyACSayACG_AHSStFZ":{"name":"update(client:server:key:)","abstract":"<p>Obtain a clock that is newer than the client and server clocks at the given <code>key</code> counter.</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV5mergeyACSayACGFZ":{"name":"merge(_:)","abstract":"<p>Merges a collection of clocks into a new DVV, removing redundant information (old entries).</p>","parent_name":"DVV"},"Structs/DVV.html#/s:19DottedVersionVector3DVVV4syncySayACGAE_AEtFZ":{"name":"sync(_:_:)","abstract":"<p>Takes two clock sets and returns a set of concurrent clocks, each belonging to one of the sets, and that","parent_name":"DVV"},"Structs/DVV.html":{"name":"DVV","abstract":"<p>A <em>dotted</em> version vector. The <code>dot</code> represents a server-side counter that is incremented at every write/store/put action.</p>"},"Structs/Dot.html":{"name":"Dot","abstract":"<p>A pairing of a entity ID with an immutable counter value.</p>"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE6searchySiSSF":{"name":"search(_:)","abstract":"<p>Search for a given counter key in the version vector.</p>","parent_name":"DotVector"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE3incySayACGSSF":{"name":"inc(_:)","abstract":"<p>Create new instance holding a version vector with the counter for the given key incremented by one.</p>","parent_name":"DotVector"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE8descendsySbSayACGF":{"name":"descends(_:)","abstract":"<p>Determine if this version vector descends from another.</p>","parent_name":"DotVector"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE7counter2ofs6UInt64VSS_tF":{"name":"counter(of:)","abstract":"<p>Locate the counter for the given key, returning nil if not found</p>","parent_name":"DotVector"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE3dot2ofACSS_tF":{"name":"dot(of:)","abstract":"<p>Generate a Dot instance using the counter + 1 for the given key</p>","parent_name":"DotVector"},"Extensions/DotVector.html#/s:Sa19DottedVersionVectorAA3DotVRszlE5mergeySayACGAEF":{"name":"merge(_:)","abstract":"<p>Merge two Dot collections. Resulting collection of Dot entities will be ordered by their <code>id</code> value and counters will be the","parent_name":"DotVector"},"Extensions/DotVector.html":{"name":"DotVector"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}